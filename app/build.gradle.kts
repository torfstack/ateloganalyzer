/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)
    implementation("com.google.code.gson:gson:2.13.1")
    implementation("info.picocli:picocli:4.7.7")
    implementation("org.projectlombok:lombok:1.18.38")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.register<JavaExec>("logGenerator") {
    classpath = sourceSets.main.get().runtimeClasspath
    mainClass = "com.torfstack.ateloganalyzer.ATELogTestFileGenerator"

    val outputFile: String by project
    val numDevices: String by project

    args = listOf(
        project.findProperty("output")?.toString() ?: "test_log.txt",
        project.findProperty("numDevices")?.toString() ?: "1000"
    )
}

application {
    // Define the main class for the application.
    mainClass = "com.torfstack.ateloganalyzer.ATELogAnalyzer"
    applicationName = "atelog-analyzer"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
